\chapter{\msyh puppet部署经验}
\section{\msyh 客户端模式的puppet部署}

在数据中心里面配置puppet,通常的架构是c/s架构的部署。这种部署当然是有很多的优势。但是也不是完全完美的，也存在一些问题，例如：当客户端太多的时候，部署一台master就会不够用，执行效率是个大问题，这时候需要部署很多台master. 还有一个就是安全问题，puppet虽然使用了https的加密传输，但是这只能保证代码在传输的过程中不会被篡改。不能保证puppet manifest 本身的安全性和可靠性，假如你的master被黑，那么所有客户端就很危险。如何解决这些问题，就是后面要谈到的。\par
我在我的生产环境用了puppet的单机模式来解决这两个问题。大家知道，puppet可以直接用puppet 来执行puppet的代码。这些代码也支持模板，模块,facter变量这些，和c/s模式一样。没有区别。\par
大致的思路是，客户端从通过rsync,ftp或者https等从一个中心服务器下载经过gpg签字和加密的代码到本地执行。然后把执行结果返回给puppet dashboard。这样的话，不需要维护master,不需要维护hostname,以及烦人的证书问题。另外就是发布的代码，可以用gpg进行加密和签名。
客户端在执行代码以前要对代码的签名进行验证，如果签名不对，就不执行代码。这样，即使你的中心服务器被黑，黑客也不能随意发布恶意的puppet代码给客户端，因为他不能对他发布的代码签名（因此，签名的私钥需要保存在安全的地方，比如自己的私人电脑）。我现在的做法是，在我自己的电脑上放gpg私钥，其他地方都没有，要发布puppet代码的时候，我先对代码签名，然后上传到中心服务器，下发到puppet客户端。另外的自己的pc电脑做了根目录加密，即使黑客拿岛我的硬盘，也拿不到gpg私钥\par
通常，说到这个份上，应该知道怎么做了，但是为了快速上手，还是把我生产环境的部署步骤再说说。\par

1. 首先准备gpg密钥对，最好是在一个根系统加密的linux系统。如果没有linux系统，可以用虚拟机做一个。
执行gpg --gen-key 产生钥匙。
如果你linux系统开机时间不长，系统上的随机数少，产生钥匙的过程中会提示你随机数不够，需要乱敲键盘和移动鼠标来产生随机数，乱折腾下就够了。(我们需要生成大量的随机字节。这个时候您可以多做些琐事(像是敲打键盘、移动
鼠标、读写硬盘之类的)，这会让随机数字发生器有更好的机会获得足够的熵数。
)
密钥对生成以后，需要把公钥导出，并且用安全的方法拷贝到运行puppet客户端的服务器上。例如scp.
gpg --export -a > you.pub
公钥拷贝到客户端以后，用gpg --import you.pub 导入公钥。
导入以后，可以用gpg --list-key 来验证是否导入成功。



